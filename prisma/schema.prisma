// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// provider = "postgresql"
// provider = "mysql"
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Parent {
  id String @id @default(uuid())

  auth           Auth?
  fullname       String
  contact_number String   @unique
  address        Address? @relation(fields: [address_id], references: [id], onDelete: Cascade)
  address_id     String?
  image          String?
  role           Role     @default(Parent)

  pushToken String?

  created   DateTime  @default(now())
  updated   DateTime  @updatedAt
  lastLogin DateTime?

  Token  Token[]
  Infant Infant[]

  Notification Notification[]

  conversations Conversation[] @relation("ConversationParticipants")
  Message       Message[]
}

model Auth {
  id String @id @default(uuid())

  email String @unique

  Parent    Parent @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id String @unique

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Token {
  id String @id @default(uuid())

  type       Type     @default(EMAIL) // EMAIL || API
  emailToken String?  @unique
  valid      Boolean  @default(true)
  expiration DateTime

  Parent    Parent? @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id String?

  created DateTime @default(now())
  updated DateTime @updatedAt
}

enum Type {
  EMAIL
  API
}

enum Role {
  Parent
  Admin
}

enum Gender {
  Male
  Female
}

model Birthday {
  id String @id @default(uuid())

  month Int
  day   Int
  year  Int

  infant Infant[]

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Address {
  id String @id @default(uuid())

  purok        String
  baranggay    String
  municipality String
  province     String

  infant Infant[]
  Parent Parent[]

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Infant {
  id String @id @default(uuid())

  fullname       String
  birthday       Birthday? @relation(fields: [birthday_id], references: [id], onDelete: Cascade)
  birthday_id    String?
  place_of_birth String
  address        Address?  @relation(fields: [address_id], references: [id], onDelete: Cascade)
  address_id     String?
  height         Float
  gender         Gender
  weight         Float
  mothers_name   String
  fathers_name   String
  health_center  String
  family_no      Int

  image String?

  Parent    Parent @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id String

  Vaccination_Schedule Vaccination_Schedule[]

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Vaccination_Names {
  id String @id @default(uuid())

  vaccine_name      String
  vaccine_type_code String @unique

  frequency            Int
  //these can be converted to days 
  //if the value is zero it means the vaccine is given at birth
  once                 String //1,15 is for 1 month and a half same with twice and thrice
  twice                String?
  thrice               String?
  //end===================
  Vaccination_Schedule Vaccination_Schedule[]

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Vaccination_Schedule {
  id String @id @default(uuid())

  vaccine_names Vaccination_Names[]
  infant        Infant[]
  Vaccination   Vaccination[]

  firstDose  DateTime?
  secondDose DateTime?
  thirdDose  DateTime?

  //for the update dates on the vacccine sched this is going to be update
  UpdateFirstDose  DateTime?
  UpdateSecondDose DateTime?
  UpdateThirdDose  DateTime?

  //compare the firsDose to  third dose date to this update dose date and make a remark on each dose
  remark_FirstDose  String?
  remark_SecondDose String?
  remark_ThirdDose  String?

  created DateTime @default(now())
  updated DateTime @updatedAt
}

enum comparison {
  LATE
  ON_TIME
  EARLY
}

enum Status {
  ONGOING
  NOT_DONE
  DONE
}

model Vaccination {
  id String @id @default(uuid())

  vaccination_schedule    Vaccination_Schedule @relation(fields: [vaccination_Schedule_id], references: [id])
  vaccination_Schedule_id String

  firstDoseStatus  Status
  secondDoseStatus Status?
  thirdDoseStatus  Status?

  remarks String?

  percentage Int @default(0)

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Notification {
  id String @id @default(uuid())

  parent   Parent? @relation(fields: [parentId], references: [id])
  parentId String?

  title String?
  body  String?
  data  String?

  created DateTime @default(now())
  updated DateTime @updatedAt
}

//===========================================================================================================================================

model Conversation {
  id           String   @id @default(uuid())
  // Many-to-many relation with Parent. The relation name "ConversationParticipants" ties it to Parent.
  participants Parent[] @relation("ConversationParticipants")

  // A conversation has many messages.
  messages Message[]

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Message {
  id             String       @id @default(uuid())
  // Each message belongs to one conversation.
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  // Sender is a Parent.
  sender   Parent @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  text String

  read Boolean @default(false) // New field

  created DateTime @default(now())
  updated DateTime @updatedAt
}
